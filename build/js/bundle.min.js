'use strict';

var PaintMode;
(function (PaintMode) {
    PaintMode["Blank"] = "blank";
    PaintMode["Start"] = "start";
    PaintMode["End"] = "end";
    PaintMode["Wall"] = "wall";
})(PaintMode || (PaintMode = {}));
var PaintManager = /** @class */ (function () {
    function PaintManager() {
        this.init();
    }
    PaintManager.prototype.init = function () {
        document.addEventListener("keypress", function (e) {
            switch (e.code) {
                case "Digit1":
                    PaintManager.mode = PaintMode.Blank;
                    break;
                case "Digit2":
                    PaintManager.mode = PaintMode.Start;
                    break;
                case "Digit3":
                    PaintManager.mode = PaintMode.End;
                    break;
                case "Digit4":
                    PaintManager.mode = PaintMode.Wall;
                    break;
            }
        });
    };
    PaintManager.mode = PaintMode.Blank;
    return PaintManager;
}());

var NodeType;
(function (NodeType) {
    NodeType["Blank"] = "blank";
    NodeType["Start"] = "start";
    NodeType["End"] = "end";
    NodeType["Wall"] = "wall";
})(NodeType || (NodeType = {}));
var board = document.getElementById("board");
var Node = /** @class */ (function () {
    function Node(type) {
        this.type = NodeType.Blank;
        this.type = type;
        this.createElement();
        this.createListener();
    }
    Node.prototype.createElement = function () {
        var nodeElement = document.createElement("div");
        nodeElement.classList.add("node");
        nodeElement.classList.add("node-".concat(this.type));
        board.appendChild(nodeElement);
        this.element = nodeElement;
    };
    Node.prototype.createListener = function () {
        var _this = this;
        this.element.addEventListener("click", function () {
            switch (PaintManager.mode) {
                case PaintMode.Blank:
                    _this.updateNodeType(NodeType.Blank);
                    break;
                case PaintMode.Start:
                    NodeManager.setStartNode(_this);
                    _this.updateNodeType(NodeType.Start);
                    break;
                case PaintMode.End:
                    NodeManager.setEndNode(_this);
                    _this.updateNodeType(NodeType.End);
                    break;
                case PaintMode.Wall:
                    _this.updateNodeType(NodeType.Wall);
                    break;
            }
        });
    };
    Node.prototype.updateNodeType = function (type) {
        var oldType = this.type;
        this.type = type;
        // Change the classes to update colour.
        this.element.classList.remove("node-".concat(oldType));
        this.element.classList.add("node-".concat(type));
    };
    return Node;
}());

var NODE_COUNT = 100;
var NodeManager = /** @class */ (function () {
    function NodeManager() {
        this.nodes = [];
        this.generateBoard();
    }
    NodeManager.prototype.generateBoard = function () {
        for (var i = 0; i < NODE_COUNT; i++) {
            var node = new Node(NodeType.Blank);
            this.nodes.push(node);
        }
    };
    NodeManager.prototype.resetBoard = function () {
        // Set all nodes to blank.
        this.nodes.forEach(function (node) {
            node.updateNodeType(NodeType.Blank);
            NodeManager.startNode = null;
            NodeManager.endNode = null;
        });
    };
    NodeManager.setStartNode = function (node) {
        if (this.startNode != null)
            // There is an existing one, so set it blank.
            this.startNode.updateNodeType(NodeType.Blank);
        // Update variable and new start node.
        this.startNode = node;
        node.updateNodeType(NodeType.Start);
    };
    NodeManager.setEndNode = function (node) {
        if (this.endNode != null)
            // There is an existing one, so set it to blank.
            this.endNode.updateNodeType(NodeType.Blank);
        // Update variable and new end node.
        this.endNode = node;
        node.updateNodeType(NodeType.Start);
    };
    return NodeManager;
}());

new PaintManager();
var nodeManager = new NodeManager();
var resetButton = document.getElementById("reset-button");
resetButton.addEventListener("click", function () { return nodeManager.resetBoard(); });
